#!/usr/local/bin/python

import csv
import datetime

"""
GTFS specification (https://developers.google.com/transit/gtfs/reference/)

routes.txt
----------
route_id         - Contains an ID that uniquely identifies a route.
                   Frequently used routes:
                      1: Babylon
                      2: Hempstead
                      6: Long Beach
                     10: Port Jefferson
route_short_name - Contains the short name of a route.
route_long_name  - Contains the full name of a route.
route_type       - Describes the type of transportation used on a route.
                   Valid values for this field are:
                     0: Tram, Streetcar, Light rail
                     1: Subway
                     2: Rail
                     3: Bus
                     4: Ferry
                     5: Cable car
                     6: Gondola, Suspended cable car
                     7: Funicular
route_color      - In systems that have colors assigned to routes, this defines
                   a color that corresponds to a route.
route_text_color - Specifies a legible color to use for text drawn against a
                   background of route_color.

trips.txt
---------
route_id        - Contains an ID that uniquely identifies a route.
                  This value is referenced from the routes.txt file.
service_id      - Contains an ID that uniquely identifies a set of dates when
                  service is available for one or more routes.
trip_id         - Contains an ID that identifies a trip.
                  The trip_id is dataset unique.
trip_headsign   - Contains the text that appears on a sign that identifies the
                  trip's destination to passengers.
trip_short_name - Contains the text that appears in schedules and sign boards
                  to identify the trip to passengers.
direction_id    - Contains a binary value that indicates the direction of
                  travel for a trip.
                  Valid values for this field are:
                    0: Points East (outbound travel)
                    1: Points West (inbound travel)
shape_id        - Contains an ID that defines a shape for the trip. This value
                  is referenced from the shapes.txt file.

stop_times.txt
--------------
trip_id        - Contains an ID that identifies a trip. This value is
                 referenced from the trips.txt file.
arrival_time   - Specifies the arrival time at a specific stop for a specific
                 trip on a route.
departure_time - Specifies the departure time from a specific stop for a
                 specific trip on a route.
stop_id        - Contains an ID that uniquely identifies a stop. The stop_id is
                 referenced from the stops.txt file.
                 Frequently used stations:
                    8: Penn Station
                   12: Atlantic Terminal
                   15: Jamaica
                   38: Country Life Press
                   42: Mineola
                  102: East Rockaway
                  106: Rockville Centre
stop_sequence  - Identifies the order of the stops for a particular trip.
"""

str2dt = lambda x: datetime.time(*map(int, x.split(':')))

today = "{:%Y%m%d}".format(datetime.date.today())
now   = str2dt(datetime.datetime.now().strftime('%H:%M'))

stops_txt          = '/Users/steven/google_transit/stops.txt'
trips_txt          = '/Users/steven/google_transit/trips.txt'
routes_txt         = '/Users/steven/google_transit/routes.txt'
stop_times_txt     = '/Users/steven/google_transit/stop_times.txt'
calendar_dates_txt = '/Users/steven/google_transit/calendar_dates.txt'

trip_ids = []
trains = {}

with open(trips_txt, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',', quotechar='"')
    # Skip over the header of the csv file
    next(csvreader)

    for row in csvreader:
        route_id = int(row[0])
        service_id = row[1]
        direction_id = int(row[5])

        if route_id == 2 and direction_id == 0 and service_id == "GO203_1665":
            # This is a train that is heading eastbound on a weekday on the hempstead branch
            trip_ids.append(row[2])

with open(stop_times_txt, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',', quotechar='"')
    # Skip over the header of the csv file
    next(csvreader)

    for row in csvreader:
        trip_id = row[0]
        arrival_time = row[1]
        departure_time = row[2]
        stop_id = int(row[3])
        stop_sequence = int(row[4])

        if stop_id == 8 and stop_sequence == 1 and trip_id in trip_ids:
            trains[trip_id] = {'depart': departure_time, 'arrive': None}

        if stop_id == 38 and trip_id in trains:
            trains[trip_id]['arrive'] = arrival_time

for train in sorted(trains):
    if trains[train]['arrive'] is None:
        continue

    depart = str2dt(trains[train]['depart'])
    arrive = str2dt(trains[train]['arrive'])

    depart_delta = datetime.timedelta(hours=depart.hour, minutes=depart.minute)
    arrive_delta = datetime.timedelta(hours=arrive.hour, minutes=arrive.minute)

    travel_time = str2dt((arrive_delta - depart_delta).__str__())

    if depart > now:
        print "{} -> {} ({}{})".format(
            depart.strftime("%H:%M"),
            arrive.strftime("%H:%M"),
            travel_time.strftime("%H hour ") if travel_time.hour > 0 else "",
            travel_time.strftime("%M minutes"))
